rm( list = ls() )
setwd( "/Users/jyoung20/GitHub/TAWR2" )
library( xml2 )
library( dplyr )
xml_doc <- read_xml( "data/drama/hamlet.xml"  )
# speakers
speakers_ns <- xml_find_all( xml_doc, ".//SPEAKER" )
speaker_names_v <- xml_text( speakers_ns )
sort( table( speaker_names_v ), decreasing = TRUE )
sort(
table( speaker_names_v ) / length( speakers_ns ) ,
decreasing = TRUE
)
# speeches
speeches_ns <- xml_find_all( xml_doc, ".//SPEECH" )
# create a function to get the speaker and the receiver together
get_pairing <- function( node ){
speaker_v <- xml_text( xml_find_all( node, "SPEAKER" ) )
receiver_v <- xml_text( xml_find_all( node, "RECEIVER" ) )
paste( speaker_v, " -> ", receiver_v )
}
# run the function inside lapply
pairings_l <- lapply( speeches_ns, get_pairing )
# unlist to get a vector of characters
pairs_v <- unlist( pairings_l )
# put it together in a nice data frame
pairings_df <- data.frame( table( pairs_v ) )
# arrange the data by frequency of interaction
arrange( pairings_df, desc( Freq ) )
# make the function better by restructuring what data are pulled
# also add the collapse to the speaker and receiver to combine multiple people
get_pairing <- function( node ){
speaker_v <-paste(
xml_text( xml_find_all( node, "SPEAKER" ) ),
collapse = "/"
)
receiver_v <- paste(
xml_text( xml_find_all( node, "RECEIVER" ) ),
collapse = "/"
)
lines_v <- paste(
xml_text( xml_find_all( node, "LINE" ) ),
collapse = " "
)
c( speaker_v, receiver_v, lines_v )
}
source( "code/corpus_functions.R" )
speech_data_l <- lapply( speeches_ns, get_pairing )
speech_data_l
speech_data_df <- data.frame(
do.call( rbind, speech_data_l ),
stringsAsFactors = FALSE
)
speech_data_df
colnames( speech_data_df ) <- c( "Speaker", "Receiver", "Speech" )
speakers_df <- select( speech_data_df, Speaker ) %>%
unique() %>%
arrange( Speaker )
speakers_df
# see the unique receivers
receivers_df <- select( speech_data_df, Receiver ) %>%
unique() %>%
arrange( Receiver )
receivers_df
pairings_df <- mutate(
speech_data_df,
pair = paste( Speaker, Receiver, sep = " -> " )
) %>%
select( pair ) %>%
unique() %>%
arrange( pair )
pairings_df
# modified tokenize function
get_token_count <- function(
text_v,
pattern = "[^A-Za-z0-9']",
lower = TRUE
){
if( lower ){
text_v <- tolower( text_v )
}
word_v <- unlist( strsplit( text_v, pattern ) )
word_v[which( word_v != "" )]
length( word_v )
}
speech_data_counts_df <- rowwise( speech_data_df ) %>%
mutate( word_count = get_token_count( Speech ) )
speech_data_counts_df
sorted_speeches_df <- arrange(
speech_data_counts_df,
desc( word_count )
) %>%
select( Speaker, Receiver, word_count )
sorted_speeches_df
speech_data_counts_df[speech_data_counts_df$Speaker=="HAMLET"]
speech_data_counts_df[speech_data_counts_df$Speaker=="HAMLET",]
group_by( sorted_speeches_df, Speaker ) %>%
summarize( Total = sum( word_count ) ) %>%
arrange( desc( Total ) )
group_by( sorted_speeches_df, Speaker, Receiver ) %>%
filter( Speaker == "HAMLET" ) %>%
summarize( Total = sum( word_count ) ) %>%
arrange( desc( Total ) )
